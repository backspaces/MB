#!/usr/bin/env node
const puppeteer = require('puppeteer')
const shell = require('shelljs')

// const path = process.argv[2]
// if (!path) throw Error('Needs path argument')

// const dir = process.argv[2]
const dir = process.argv[2].replace(/\/$/, '') // remove optional final "/"

const model = process.argv[3]
if (!dir || !model) throw Error(`Needs dir & model arguments: ${dir} ${model}`)

// const [dir, model] = path.split('/')
// console.log('path:', path, 'dir:', dir, 'model:', model)
// if (!dir || !model) throw Error('Needs dir/model argument')

const indexFile = dir === 'models' ? 'test.html' : ''
const url = `http://127.0.0.1:8080/${dir}/${indexFile}?${model}`
console.log('url:', url)

const child = shell.exec(
    './node_modules/.bin/live-server --no-browser --quiet --watch=src',
    {
        async: true,
    }
)

// const waitSecs = model === 'flock' ? 15 : 5

const waitFinish = dir === 'models' || dir === 'models/scripts' ? true : false
const waitSecs = waitFinish ? 2 : 5
function wait(seconds = 1) {
    return new Promise((resolve, reject) => {
        setTimeout(() => resolve(), seconds * 1000)
    })
}

// window/viewport size: https://github.com/GoogleChrome/puppeteer/issues/1183
const [width, height] = [500, 600]

async function run() {
    const browser = await puppeteer.launch({
        args: [
            '--user-agent=Puppeteer',
            `--window-size=${width},${height}`,
            // for worker es6 modules
            '--enable-experimental-web-platform-features',
        ],
        headless: false,
        // devtools: true,
    })
    // console.log('browser')
    const page = await browser.newPage()
    await page.setViewport({ width, height })

    // console.log('page')
    await page.goto(url)

    if (waitFinish) {
        console.log(`waiting model finish`)
        await page.evaluate(() => {
            return new Promise(resolve => {
                function waitOn() {
                    if (window.modelSample) {
                        return resolve()
                    } else {
                        setTimeout(waitOn, 10)
                    }
                }
                waitOn()
            })
        })
    }

    console.log(`waiting ${waitSecs} seconds`)
    await wait(waitSecs)
    console.log('done waiting')

    // await page.screenshot({ path: `test/${model}.png` })
    await browser.close()

    child.kill()
}
run()
